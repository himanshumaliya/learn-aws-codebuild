# AWS CodeBuild we are going to use for automate our code update in the prod. Our AWS account is our prod env in which we want to update the code automatically whenever any change is done in out version control tool (Github Repo (main)). 

-- Lets setup our first codebuild in which we are going to update the code of our lambda which have dependencies which needs to package and update in our AWS account.

# 01. Open the AWS account and search for Codebuild in the services

# 02. Go to 'Build' option and click on 'create project'.

# 03. Enter the name of project.Like : "github CICD demo". In the additional configuration your can pass description and tags as per your requrement. 

# 04. Below in the source you need to select the source from which our codebuild will get it trigger for working. In the source you need to select the github and then connect your github account by the below option available after selecting the github. 

# 05. Your git may have contain multiple repo, so you need to confirm the repository you want link for triggering . AFter confirming the repo now you have multiple branchs as well in the repository, so you see a option name "Source Version" in which you can pass the branch name, means here the trigger is only get trigger when ever any change in that mentioned branch only.

Now in the "Primary source webhookevents" configuration

# 06. click on first option name as "Webhook" => "Rebuild every time a code change is pushed to this repository"

# 07. Build type => "Single Build" for our case, 

Filter Group 

# 08. Event Type => "Pull_Request_merged" (Means on which action our codeBuild start.)

Now the most important part "ENVIRONMENT" Configuration 
In our laptop we are running multiple commands for doing any work but here we need a machine on which all the commands can be run. 
Here, we are going the set the configuration for our machine which will do the same manual work it self on our behalf. 

Remember this is nothing but your server on which all your work will be done once the trigger happens. We will difine our all command into the steps and that command will get execuated on our this server. Like: differnet pip,zip command 

# 09.   Provisioning Model =>   " On demand " 
#       Environment image =>    " Managed Image "
#       Compute =>              " EC2 "
#       Operating system =>     " Amazon Linux "
#       Runtime(s) =>           " (Choose as per your Lambda runtime so that there is no error due to runtime difference.)" 
#       Image =>                " (Choose as per your Lambda runtime so that there is no error due to runtime difference.)"
#       Image =>                " Latest "
# Note: for checking the Imange which is compatible with our lambda runtime we can check on the "AWS Available runtime" documatation.


# 10. Service role =>       " create a new role or if you have created any one you can choose. " (We requried to give some permission in the role part that we will cover soon)      

" Buildspec "  (Here in this step we are going to define the steps which needs to carryout on our setup server for making an package of our lambda dependencies and code)
That can be done by two ways one we can directly write the steps in the code build or we can upload/push a buildspec file in our repo after creating on our local with file name "buildspec.yml". the codebuild automatically check for the file in our repo.

Leave rest of the setting as default and just create on " create ". 

Congrats your first codebuild project has been created. 
Now remember we have created the build but we didn't give any permission to access the lambda service which is going to most important to connect with services in AWS. 

so select the ARN service role attached with our build resource and give the neccessory permissions.
You didn't find any lambdafullaccess type permission in the add permissions section so you need to write it in the existing permission. 
# In our this repo i am adding the file name permissions you can copy the code from there and rememeber you have to put the arn of your resources on every place where you found 
"Resource": "arn of the resource for which the access/permission has been given" 
Means if your are giving the permission for lambda then you need to mention the lambda arn if the permission is for cloudwatch then there should be cloudwatch resource arn.

